% created by Anil Aksu 
% this routine is generated to solve and plot the solution of secondary
% waves generated by the inertia-gravity wave beam collision in 3-D

clear all 
format long

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                         %
%           Physical Constants            %
%                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% the reference density (kg/m^3)
rho_0=1000.;
% the gravity (m/sec^2)
g=9.81;
% the buoyancy frequency 
N=2.35;
% the earth rotation parameter
f= 0.1*N;
% the epsilon term to control the error
eps=10^-6;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                         %
%   Dispersion Relation Parameters of     %
%   the beam with omega_1 frequency       %
%                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% the carrier wave length in x direction
lamx=8.75;
% the carrier wave number in x direction
kx_1=2*pi/lamx;
% the carrier wave number in y direction
ky_1=2*kx_1;
% the carrier wave number in z direction
kz_1=-5*kx_1;
% the half width of the envelope
sig_1=0.5;
% the frequency, the group velocity and zeta direction of the wave beam 
[ omega_1, Cg_1, zeta_1,  J_1] =getFrequency( N,f,kx_1,ky_1,kz_1 );
% the phase relations and ratio coefficients
[ gamma_1,phase_1] = getPhasesRatios( omega_1,f,kx_1,ky_1,kz_1,N,g,rho_0 );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                         %
%   Dispersion Relation Parameters of     %
%   the beam with omega_2 frequency       %
%                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% the carrier wave length in x direction
lamx=8.75;
% the carrier wave number in x direction
kx_2=-4*pi/lamx;
% the carrier wave number in y direction
ky_2=-0.7*kx_2;
% the carrier wave number in z direction
kz_2=-3.*ky_2;
% the half width of the envelope
sig_2=0.5;
% the frequency, the group velocity and zeta direction of the wave beam 
[ omega_2, Cg_2, zeta_2, J_2 ] =getFrequency( N,f,kx_2,ky_2,kz_2 );
% the phase relations and ratio coefficients of a given wave beam 
[ gamma_2,phase_2] = getPhasesRatios( omega_2,f,kx_2,ky_2,kz_2,N,g,rho_0 );


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                         %
%           The grid attributes           %
%                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Nx=100;          % Grid points in x direction
Ny=100;          % Grid points in y direction
Nz=100;          % Grid points in z direction

Lx=100*lamx;     % Domain length in x direction
Ly=100*lamx;     % Domain length in y direction
Lz=100*lamx;     % Domain length in z direction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                         %
%   Beta coefficients and phase shifts    %
%    of nonlinear forcing                 %
%                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% let's define wavenumber vectors as arrays
k_1(1)=kx_1;
k_1(2)=ky_1;
k_1(3)=kz_1;
k_2(1)=kx_2;
k_2(2)=ky_2;
k_2(3)=kz_2;

% let's get the nonlinear forcing coefficients and the phases
[ beta,phi_f ] = getNonlinearForcingBetas( gamma_1,gamma_2,phase_1,phase_2,k_1,k_2 );

% !!! here we find the collision point
% the center of forcing of the first beam
x_cen_1= [0;0;0];
% the center of the collision the distance can be simply arranged by
% changing the factor in front of transpose of the group velocity
x_coll=x_cen_1+5000.*transpose(Cg_1)*lamx/norm(Cg_1);
% the center of forcing of the second beam
x_cen_2=x_coll-[Cg_2(1)*x_coll(3)/Cg_2(3);Cg_2(2)*x_coll(3)/Cg_2(3);x_coll(3)];

% the measure of propagation and dispersive terms
[ P_1,D_1 ] = getPropagationDispersion( N,f,kx_1,ky_1,sig_1 );
omega=linspace(f+eps,N-eps,100);

% the forcing function
[ F_coll ] = getForcingFunction( J_1,J_2,sig_1,sig_2,x_cen_1,x_cen_2 );



figure(1)
    semilogy(omega/N,P_1./D_1,'r','LineWidth',2)
%     hold on
%     semilogy(omega/N,D_2./P_2,'LineWidth',2)
    ylabel('P/D')
    xlabel('\omega/N')
    title('The ratio of dispersive effects over propagation')
    grid on
    
figure(2)
    semilogy(omega/N,D_1,'r','LineWidth',2)
    hold on
    semilogy(omega/N,P_1,'LineWidth',2)
    %ylabel('D/P')
    xlabel('\omega/N')
    legend('Dispersive terms','Propagation terms')
    title('The norm of dispersive and propagation terms')
    grid on

% the forcing freqency and the carrier wavenumber vector
omega_s= omega_1+omega_2;
kx_s= kx_1+kx_2;
ky_s= ky_1+ky_2;
kz_s= kz_1+kz_2;
% let's get the velocity, density and pressure field
[ u_p,v_p,w_p,p_p,rho_p, u_m,v_m,w_m,p_m,rho_m] = getCramersSol( F_coll,beta,phi_f,N,g,f,omega_s,rho_0, kx_s,ky_s,kz_s );
% the vertical wavenumber in both upward and downward propagating wave
[ kz_su,kz_sd ] = getSecondaryWaveNumVert(N,f,omega_s, kx_s,ky_s );
% the frequency, the group velocity and zeta direction of the downward propagating wave beam 
[ omega_sd, Cg_sd, zeta_sd, J_sd ] =getFrequency( N,f,kx_s,ky_s,kz_sd );
% the frequency, the group velocity and zeta direction of the upward propagating wave beam 
[ omega_su, Cg_su, zeta_su, J_su ] =getFrequency( N,f,kx_s,ky_s,kz_su );

%% Upward Propagating Secondary Inertia-Gravity Wave Beam Computations

% the  grid along the beam 
xi = linspace(-2.5,15,100);
eta = linspace(-2.5,2.5,100);
zeta = 0;
% the grid for upward propagating beam along the propagation direction
[XI,ETA] = meshgrid(xi,eta);
T= inv( J_su);
for i=1:100
    for j=1:100
          X_u(i,j)=T(1,:)*[XI(i,j); ETA(i,j); zeta]+x_coll(1);
          Y_u(i,j)=T(2,:)*[XI(i,j); ETA(i,j); zeta]+x_coll(2);
          Z_u(i,j)=T(3,:)*[XI(i,j); ETA(i,j); zeta]+x_coll(3);
    end
end

% the grid for downward propagating beam along the propagation direction
[XI,ETA] = meshgrid(xi,eta);
T= inv( J_sd);
for i=1:100
    for j=1:100
          X_d(i,j)=T(1,:)*[XI(i,j); ETA(i,j); zeta]+x_coll(1);
          Y_d(i,j)=T(2,:)*[XI(i,j); ETA(i,j); zeta]+x_coll(2);
          Z_d(i,j)=T(3,:)*[XI(i,j); ETA(i,j); zeta]+x_coll(3);
    end
end

% 
% 
% the grid to plot the forcing function
for i=1:Nx
    for j=1:Ny
     %x coordinate   
     x(i,j)=2.*(i-1)*lamx/Nx-lamx;     
     %y coordinate  
     y(i,j)=2.*(j-1)*lamx/Ny-lamx; 
     % the forcing function
     F_non(i,j)= double(F_coll(x(i,j)+x_coll(1),y(i,j)+x_coll(2), x_coll(3)));
     % the forcing function for the numerical solution 
     % F_up(i,j)= double(F_coll(x(i,j)+x_coll(1),y(i,j)+x_coll(2), x_coll(3)));
    end
    i
end

set(0,'DefaultAxesFontSize',13)
figure(3)
contourf(x,y,F_non,'LineColor','none'), shading flat
colorbar;
colormap('jet');
%caxis([-1, 1]);
title('Normalized nonlinear forcing field F_{coll}/F_{max}') % title
ylabel('\eta/\lambda_{x}')
% label for y axis
xlabel('\xi/\lambda_{x}')
pbaspect([1 1 1])

% Let's compute numerical wave profile for upward propagating secondary
% wave profile under the nonlinear forcing 
[ u_np, p_np, rho_np ] = getUpwardSecondaryBeam( F_coll, x_coll, lamx, Nx, Ny ); 


set(0,'DefaultAxesFontSize',13)
figure(3)
contourf(x,y,u_np,'LineColor','none'), shading flat
colormap('jet');
colorbar;
%caxis([-1, 1]);
title('Normalized Envelope profile A_{\omega_s}^{+}/u_{max}') % title
ylabel('y/\lambda_{x}')
% label for y axis
xlabel('x/\lambda_{x}')
pbaspect([1 1 1])

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                         %
%        Numerical Solution with          %
%          finite differencing            %
%                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% the phase relations and ratio coefficients for upward propagating
% secondary wave
[ gamma_su,phase_su] = getPhasesRatios( omega_su,f,kx_s,ky_s,kz_su,N,g,rho_0 );
 % System matrix for upward progating matrix
[ D_u ] = getPropagationMatrix( Cg_su, Lx, Ly, Lz, Nx, Ny, Nz ); 
% the corresponding forcing function for upward propagating beam 
F_su = reshape(F_non,[Ny*Nx,1])/(2.*gamma_su(6,1)); 
% the amplitude profile of Amplitude of z velocity
A_z = D_u\F_su;
% the peak of the envelope profile 
u_max = max(A_z);
% let's reshape it solve 
A_z = reshape(A_z,[Nx,Ny]);


% the amplitude profile of the upward propagating secondary beam
set(0,'DefaultAxesFontSize',13)
figure(4)
contourf(x,y,A_z/u_max,'LineColor','none'), shading flat
colormap('jet');
colorbar;
%caxis([-1, 1]);
title('Normalized Envelope profile A_{\omega_s}^{+}/u_{max}') % title
ylabel('\eta/\lambda_{x}')
% label for y axis
xlabel('\xi/\lambda_{x}')
pbaspect([1 1 1])


% the velocity profile of the upward propagating secondary beam
set(0,'DefaultAxesFontSize',13)
figure(5)
surf(x,y,A_z/u_max), shading flat
colormap('parula');
colorbar;
%caxis([-1, 1]);
title('Normalized Envelope profile A_{\omega_s}^{+}/u_{max}') % title
ylabel('\eta/\lambda_{x}')
% label for y axis
xlabel('\xi/\lambda_{x}')
pbaspect([1 1 0.2])
